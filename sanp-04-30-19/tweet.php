<!--/**-->
<!--* mutator method for tweet date-->
<!--*-->
<!--* @param \DateTime|string|null $newTweetDate tweet date as a DateTime object or string (or null to load the current time)-->
<!--* @throws \InvalidArgumentException if $newTweetDate is not a valid object or string-->
<!--* @throws \RangeException if $newTweetDate is a date that does not exist-->
<!--**/-->
<!--public function setTweetDate($newTweetDate = null) : void {-->
<!--// base case: if the date is null, use the current date and time-->
<!--if($newTweetDate === null) {-->
<!--$this->tweetDate = new \DateTime();-->
<!--return;-->
<!--}-->
<!---->
<!--// store the like date using the ValidateDate trait-->
<!--try {-->
<!--$newTweetDate = self::validateDateTime($newTweetDate);-->
<!--} catch(\InvalidArgumentException | \RangeException $exception) {-->
<!--$exceptionType = get_class($exception);-->
<!--throw(new $exceptionType($exception->getMessage(), 0, $exception));-->
<!--}-->
<!--$this->tweetDate = $newTweetDate;-->
<!--}-->
<!---->
<!--/**-->
<!--* gets all Tweets-->
<!--*-->
<!--* @param \PDO $pdo PDO connection object-->
<!--* @return \SplFixedArray SplFixedArray of Tweets found or null if not found-->
<!--* @throws \PDOException when mySQL related errors occur-->
<!--* @throws \TypeError when variables are not the correct data type-->
<!--**/-->
<!--public static function getAllTweets(\PDO $pdo) : \SPLFixedArray {-->
<!--// create query template-->
<!--$query = "SELECT tweetId, tweetProfileId, tweetContent, tweetDate FROM tweet";-->
<!--$statement = $pdo->prepare($query);-->
<!--$statement->execute();-->
<!---->
<!--// build an array of tweets-->
<!--$tweets = new \SplFixedArray($statement->rowCount());-->
<!--$statement->setFetchMode(\PDO::FETCH_ASSOC);-->
<!--while(($row = $statement->fetch()) !== false) {-->
<!--try {-->
<!--$tweet = new Tweet($row["tweetId"], $row["tweetProfileId"], $row["tweetContent"], $row["tweetDate"]);-->
<!--$tweets[$tweets->key()] = $tweet;-->
<!--$tweets->next();-->
<!--} catch(\Exception $exception) {-->
<!--// if the row couldn't be converted, rethrow it-->
<!--throw(new \PDOException($exception->getMessage(), 0, $exception));-->
<!--}-->
<!--}-->
<!--return ($tweets);-->
<!--}-->

<!--/**-->
<!--* mutator method for tweets by tweet date-->
<!--*-->
<!--* @param \DateTime|string|null $newTweetDate tweet date as a DateTime object or string (or null to load the current time)-->
<!--* @return \SplFixedArray SplFixedArray of Tweets found or null if not found-->
<!---->
<!--public static function getTweetsByTweetdate(\PDO $pdo) : \SPLFixedArray {-->
<!--// create query template-->
<!--$query = "SELECT tweetId, tweetProfileId, tweetContent, tweetDate FROM tweet";-->
<!--$statement = $pdo->prepare($query);-->
<!--$statement->execute();-->
<!---->
<!--// build an array of tweetsByTweetDate-->
<!--$tweetsByTweetDate = new \SplFixedArray($statement->rowCount());-->
<!--$statement->setFetchMode(\PDO::FETCH_ASSOC);-->
<!--while(($row = $statement->fetch()) !== false) {-->
<!--try {-->
<!--$tweet = new Tweet($row["tweetId"], $row["tweetProfileId"], $row["tweetContent"], $row["tweetDate"]);-->
<!--$tweets[$tweets->key()] = $tweet;-->
<!--$tweets->next();-->
<!--} catch(\Exception $exception) {-->
<!--// if the row couldn't be converted, rethrow it-->
<!--throw(new \PDOException($exception->getMessage(), 0, $exception));-->
<!--}-->
<!--}-->
<!--return ($tweetsByTweetDate);-->
<!--}-->
<!--public function insert(\PDO $pdo) : void {-->
<!---->
<!--// create query template-->
<!--$query = "INSERT INTO tweet(tweetId,tweetProfileId, tweetContent, tweetDate) VALUES(:tweetId, :tweetProfileId, :tweetContent, :tweetDate)";-->
<!--$statement = $pdo->prepare($query);-->
<!---->
<!--// bind the member variables to the place holders in the template-->
<!--$formattedDate = $this->tweetDate->format("Y-m-d H:i:s.u");-->
<!--$parameters = ["tweetId" => $this->tweetId->getBytes(), "tweetProfileId" => $this->tweetProfileId->getBytes(), "tweetContent" => $this->tweetContent, "tweetDate" => $formattedDate];-->
<!--$statement->execute($parameters);-->
}


<?php

/**
 * Gets all tweets posted on the calendar day of a given DateTime.
 *
 * @param \PDO $pdo The database connection object.
 * @param DateTime $tweetDate The date on which to search for tweets.
 * @return \SplFixedArray An array of tweet objects that match the date.
 * @throws \PDOException MySQL errors generated by the statement.
 **/
public static function getTweetsByTweetDate(\PDO $pdo, DateTime $tweetDate) : \SplFixedArray {

	// Create dates for midnight of the date and midnight of the next day.
	$startDateString = $tweetDate->format('Y-m-d') . ' 00:00:00';
	$startDate = new DateTime($startDateString);
	$endDate = new DateTime($startDateString);
	$endDate->add(new DateInterval('P1D'));

	// Create the query template.
	$query = "SELECT tweetId, tweetProfileId, tweetContent, tweetDate FROM tweet WHERE tweetDate >= :startDate AND tweetDate < :endDate";
	$statement = $pdo->prepare($query);

	// Bind the beginning and end dates to the place holder in the template.
	$parameters = [
		'startDate' => $startDate->format("Y-m-d H:i:s.u"),
		'endDate' => $endDate->format("Y-m-d H:i:s.u"),
	];
	$statement->execute($parameters);

	// Build an array of tweets from the returned rows.
	$tweets = new \SplFixedArray($statement->rowCount());
	$statement->setFetchMode(\PDO::FETCH_ASSOC);
	while(($row = $statement->fetch()) !== false) {
		try {
			$tweet = new Tweet($row["tweetId"], $row["tweetProfileId"], $row["tweetContent"], $row["tweetDate"]);
			$tweets[$tweets->key()] = $tweet;
			$tweets->next();
		} catch(\Exception $exception) {
			// If the row couldn't be converted, throw an exception.
			throw(new \PDOException($exception->getMessage(), 0, $exception));
		}
	}
	return($tweets);
}







